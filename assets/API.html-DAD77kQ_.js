import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as s,o as l}from"./app-D8piLhsI.js";const n={};function a(o,i){return l(),e("div",null,i[0]||(i[0]=[s(`<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h1><p>SRA（StarRailAssistant）是基于图像识别的自动化工具，其核心功能通过API接口实现。本文档详细介绍各模块API的功能、参数及返回值。</p><h2 id="一、鼠标事件" tabindex="-1"><a class="header-anchor" href="#一、鼠标事件"><span>一、鼠标事件</span></a></h2><p>鼠标事件用于模拟真实鼠标操作，支持图像定位点击、坐标点击、光标移动及滚轮控制，核心实现位于 <code>SRACore.util.SRAOperator.SRAOperator</code> 类。</p><h3 id="_1-1-click-img-img-path-str-title-str-崩坏-星穹铁道-offset-tuple-int-int-0-0" tabindex="-1"><a class="header-anchor" href="#_1-1-click-img-img-path-str-title-str-崩坏-星穹铁道-offset-tuple-int-int-0-0"><span>1.1 click_img(img_path: str, title: str = &quot;崩坏：星穹铁道&quot;, offset: tuple[int, int] = (0, 0))</span></a></h3><ul><li><strong>功能</strong>：在指定窗口中定位目标图像并点击（支持偏移量调整）。</li><li><strong>原理</strong>：通过 <code>locate()</code> 定位图像位置，计算实际屏幕坐标后调用 <code>pyautogui.click()</code> 点击。</li><li><strong>参数</strong>： <ul><li><code>img_path</code>：待点击图像的本地路径（如 <code>res/img/start_game.png</code>）。</li><li><code>title</code>：目标窗口标题（默认：&quot;崩坏：星穹铁道&quot;）。</li><li><code>offset</code>：点击位置相对于图像中心的偏移量（格式：(x偏移, y偏移)）。</li></ul></li><li><strong>返回值</strong>：<code>bool</code>，成功点击返回 <code>True</code>，未找到图像或窗口异常返回 <code>False</code>。</li><li><strong>异常</strong>：可能抛出 <code>MatchFailureException</code>（图像未匹配）、<code>WindowNoFoundException</code>（窗口未找到）。</li><li><strong>示例</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 点击启动游戏按钮（米哈游启动器窗口）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">success </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SRAOperator.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">click_img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;res/img/start_game.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;米哈游启动器&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_1-2-click-point-x-int-y-int-clicks-int-1-interval-float-0-1" tabindex="-1"><a class="header-anchor" href="#_1-2-click-point-x-int-y-int-clicks-int-1-interval-float-0-1"><span>1.2 click_point(x: int, y: int, clicks: int = 1, interval: float = 0.1)</span></a></h3><ul><li><strong>功能</strong>：在指定屏幕坐标处点击鼠标。</li><li><strong>参数</strong>： <ul><li><code>x</code>、<code>y</code>：目标坐标（基于屏幕绝对位置）。</li><li><code>clicks</code>：点击次数（默认1次）。</li><li><code>interval</code>：多次点击的间隔时间（秒，默认0.1秒）。</li></ul></li><li><strong>返回值</strong>：无。</li><li><strong>注意</strong>：坐标需基于当前屏幕分辨率（推荐1920×1080），窗口遮挡或坐标超出屏幕可能导致点击失败。</li></ul><h3 id="_1-3-moveto-x-int-y-int-duration-float-0-2" tabindex="-1"><a class="header-anchor" href="#_1-3-moveto-x-int-y-int-duration-float-0-2"><span>1.3 moveTo(x: int, y: int, duration: float = 0.2)</span></a></h3><ul><li><strong>功能</strong>：平滑移动光标到指定坐标。</li><li><strong>参数</strong>： <ul><li><code>x</code>、<code>y</code>：目标坐标。</li><li><code>duration</code>：移动耗时（秒，默认0.2秒）。</li></ul></li><li><strong>返回值</strong>：无。</li></ul><h3 id="_1-4-moverel-x-offset-int-y-offset-int-duration-float-0-2" tabindex="-1"><a class="header-anchor" href="#_1-4-moverel-x-offset-int-y-offset-int-duration-float-0-2"><span>1.4 moveRel(x_offset: int, y_offset: int, duration: float = 0.2)</span></a></h3><ul><li><strong>功能</strong>：相对于当前光标位置移动。</li><li><strong>参数</strong>： <ul><li><code>x_offset</code>、<code>y_offset</code>：横向/纵向偏移量（正数向右/下，负数向左/上）。</li><li><code>duration</code>：移动耗时（秒，默认0.2秒）。</li></ul></li><li><strong>返回值</strong>：无。</li></ul><h3 id="_1-5-scroll-delta-int" tabindex="-1"><a class="header-anchor" href="#_1-5-scroll-delta-int"><span>1.5 scroll(delta: int)</span></a></h3><ul><li><strong>功能</strong>：模拟鼠标滚轮滚动。</li><li><strong>参数</strong>： <ul><li><code>delta</code>：滚动量（正数向上滚，负数向下滚）。</li></ul></li><li><strong>返回值</strong>：无。</li></ul><h2 id="二、键盘事件" tabindex="-1"><a class="header-anchor" href="#二、键盘事件"><span>二、键盘事件</span></a></h2><p>键盘事件用于模拟键盘输入及组合键操作，核心实现位于 <code>SRACore.util.SRAOperator.SRAOperator</code> 类。</p><h3 id="_2-1-press-key-key-str-presses-int-1-interval-float-0-1" tabindex="-1"><a class="header-anchor" href="#_2-1-press-key-key-str-presses-int-1-interval-float-0-1"><span>2.1 press_key(key: str, presses: int = 1, interval: float = 0.1)</span></a></h3><ul><li><strong>功能</strong>：模拟按键按下并释放（支持单个按键或组合键，如 <code>ctrl+c</code>）。</li><li><strong>参数</strong>： <ul><li><code>key</code>：按键名称（如 <code>&#39;enter&#39;</code>、<code>&#39;ctrl+a&#39;</code>）。</li><li><code>presses</code>：按键次数（默认1次）。</li><li><code>interval</code>：多次按键的间隔时间（秒，默认0.1秒）。</li></ul></li><li><strong>返回值</strong>：无。</li><li><strong>示例</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 按下Enter键</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SRAOperator.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">press_key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;enter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-2-press-key-for-a-while-key-str-duration-float-1-0" tabindex="-1"><a class="header-anchor" href="#_2-2-press-key-for-a-while-key-str-duration-float-1-0"><span>2.2 press_key_for_a_while(key: str, duration: float = 1.0)</span></a></h3><ul><li><strong>功能</strong>：按住按键持续一段时间后释放。</li><li><strong>参数</strong>： <ul><li><code>key</code>：按键名称（如 <code>&#39;shift&#39;</code>）。</li><li><code>duration</code>：按住时间（秒，默认1秒）。</li></ul></li><li><strong>返回值</strong>：无。</li></ul><h3 id="_2-3-copy-text-str" tabindex="-1"><a class="header-anchor" href="#_2-3-copy-text-str"><span>2.3 copy(text: str)</span></a></h3><ul><li><strong>功能</strong>：将指定文本复制到系统剪贴板。</li><li><strong>参数</strong>： <ul><li><code>text</code>：待复制的文本内容。</li></ul></li><li><strong>返回值</strong>：无。</li><li><strong>依赖</strong>：基于 <code>pyperclip</code> 实现，需确保系统剪贴板服务正常。</li></ul><h3 id="_2-4-paste" tabindex="-1"><a class="header-anchor" href="#_2-4-paste"><span>2.4 paste()</span></a></h3><ul><li><strong>功能</strong>：将剪贴板内容粘贴到当前焦点位置。</li><li><strong>返回值</strong>：无。</li></ul><h3 id="_2-5-write-text-str-interval-float-0-05" tabindex="-1"><a class="header-anchor" href="#_2-5-write-text-str-interval-float-0-05"><span>2.5 write(text: str, interval: float = 0.05)</span></a></h3><ul><li><strong>功能</strong>：模拟逐字符输入文本（支持中文需输入法配合）。</li><li><strong>参数</strong>： <ul><li><code>text</code>：待输入的文本。</li><li><code>interval</code>：字符输入间隔（秒，默认0.05秒）。</li></ul></li><li><strong>返回值</strong>：无。</li></ul><h2 id="三、画面检测" tabindex="-1"><a class="header-anchor" href="#三、画面检测"><span>三、画面检测</span></a></h2><p>画面检测是SRA的核心能力，通过图像识别定位游戏内元素，核心实现位于 <code>SRACore.util.SRAOperator.SRAOperator</code> 类。</p><h3 id="_3-0-reset" tabindex="-1"><a class="header-anchor" href="#_3-0-reset"><span>3.0 reset()</span></a></h3><ul><li><strong>功能</strong>：重置截图区域的偏移量和缩放比例为默认值。</li><li><strong>参数</strong>：无。</li><li><strong>返回值</strong>：无。</li></ul><h3 id="_3-1-get-screenshot-region-title-str-tuple-int-int-int-int" tabindex="-1"><a class="header-anchor" href="#_3-1-get-screenshot-region-title-str-tuple-int-int-int-int"><span>3.1 get_screenshot_region(title: str) -&gt; tuple[int, int, int, int]</span></a></h3><ul><li><strong>功能</strong>：根据窗口标题获取截图区域并计算实际坐标。</li><li><strong>参数</strong>： <ul><li><code>title</code>：目标窗口标题。</li></ul></li><li><strong>返回值</strong>：截图区域元组 <code>(area_left, area_top, area_width, area_height)</code>。</li><li><strong>异常</strong>：<code>WindowNoFoundException</code>（窗口未找到）。</li></ul><h3 id="_3-2-get-screenshot-title-str-崩坏-星穹铁道-region-tuple-int-int-int-int-none-none-image-image" tabindex="-1"><a class="header-anchor" href="#_3-2-get-screenshot-title-str-崩坏-星穹铁道-region-tuple-int-int-int-int-none-none-image-image"><span>3.2 get_screenshot(title: str = &quot;崩坏：星穹铁道&quot;, region: tuple[int, int, int, int] | None = None) -&gt; Image.Image</span></a></h3><ul><li><strong>功能</strong>：获取指定窗口的截图并调整尺寸（适配1920×1080分辨率）。</li><li><strong>参数</strong>： <ul><li><code>title</code>：窗口标题（默认：&quot;崩坏：星穹铁道&quot;）。</li><li><code>region</code>：截图区域（格式：<code>(left, top, width, height)</code>，默认自动计算窗口区域）。</li></ul></li><li><strong>返回值</strong>：<code>PIL.Image.Image</code> 对象（调整后的截图）。</li><li><strong>注意</strong>：若窗口未激活或分辨率非1920×1080，可能导致截图比例异常。</li></ul><h3 id="_3-3-locate-img-path-str-title-str-崩坏-星穹铁道-tuple-int-int-int-int-none" tabindex="-1"><a class="header-anchor" href="#_3-3-locate-img-path-str-title-str-崩坏-星穹铁道-tuple-int-int-int-int-none"><span>3.3 locate(img_path: str, title: str = &quot;崩坏：星穹铁道&quot;) -&gt; tuple[int, int, int, int] | None</span></a></h3><ul><li><strong>功能</strong>：在目标窗口截图中定位指定图像的位置。</li><li><strong>原理</strong>：使用 <code>pyscreeze.locate</code> 进行模板匹配，匹配置信度由 <code>SRAOperator.confidence</code> 控制（默认0.9）。</li><li><strong>参数</strong>： <ul><li><code>img_path</code>：待定位图像的本地路径。</li><li><code>title</code>：目标窗口标题（默认：&quot;崩坏：星穹铁道&quot;）。</li></ul></li><li><strong>返回值</strong>：匹配区域的坐标及尺寸（格式：<code>(left, top, width, height)</code>），未找到返回 <code>None</code>。</li><li><strong>异常</strong>： <ul><li><code>FileNotFoundError</code>：图像文件无法读取。</li><li><code>MatchFailureException</code>：图像未匹配。</li><li><code>WindowInactiveException</code>：窗口未激活。</li></ul></li></ul><h3 id="_3-4-locatecenter-img-path-str-offset-tuple-int-int-0-0-title-str-崩坏-星穹铁道-tuple-int-int" tabindex="-1"><a class="header-anchor" href="#_3-4-locatecenter-img-path-str-offset-tuple-int-int-0-0-title-str-崩坏-星穹铁道-tuple-int-int"><span>3.4 locateCenter(img_path: str, offset: tuple[int, int] = (0, 0), title: str = &quot;崩坏：星穹铁道&quot;) -&gt; tuple[int, int]</span></a></h3><ul><li><strong>功能</strong>：定位图像中心坐标（支持偏移调整）。</li><li><strong>参数</strong>： <ul><li><code>img_path</code>：待定位图像的本地路径。</li><li><code>offset</code>：中心坐标的偏移量（格式：<code>(x偏移, y偏移)</code>，默认无偏移）。</li><li><code>title</code>：目标窗口标题（默认：&quot;崩坏：星穹铁道&quot;）。</li></ul></li><li><strong>返回值</strong>：实际屏幕坐标（格式：<code>(x, y)</code>）。</li><li><strong>示例</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定位&quot;开始游戏&quot;按钮中心（偏移10像素向下）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SRAOperator.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">locateCenter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;res/img/start_game.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-5-locateany-img-list-list-str-title-str-崩坏-星穹铁道-trace-bool-true-tuple-int-tuple-int-int-int-int" tabindex="-1"><a class="header-anchor" href="#_3-5-locateany-img-list-list-str-title-str-崩坏-星穹铁道-trace-bool-true-tuple-int-tuple-int-int-int-int"><span>3.5 locateAny(img_list: list[str], title: str = &quot;崩坏：星穹铁道&quot;, trace: bool = True) -&gt; tuple[int, tuple[int, int, int, int]]</span></a></h3><ul><li><strong>功能</strong>：依次检测图像列表，返回第一个匹配的图像索引及位置。</li><li><strong>参数</strong>： <ul><li><code>img_list</code>：待检测的图像路径列表（如 <code>[&quot;res/a.png&quot;, &quot;res/b.png&quot;]</code>）。</li><li><code>title</code>：目标窗口标题（默认：&quot;崩坏：星穹铁道&quot;）。</li><li><code>trace</code>：是否记录追踪日志（默认 <code>True</code>）。</li></ul></li><li><strong>返回值</strong>：<code>(匹配索引, 位置元组)</code>，无匹配抛出 <code>MatchFailureException</code>。</li></ul><h3 id="_3-6-exist-img-path-str-pathlike-wait-time-float-2-0-bool" tabindex="-1"><a class="header-anchor" href="#_3-6-exist-img-path-str-pathlike-wait-time-float-2-0-bool"><span>3.6 exist(img_path: str | PathLike, wait_time: float = 2.0) -&gt; bool</span></a></h3><ul><li><strong>功能</strong>：检查指定图像是否存在于当前窗口。</li><li><strong>参数</strong>： <ul><li><code>img_path</code>：待检测图像的本地路径。</li><li><code>wait_time</code>：等待检测的时间（秒，默认2.0秒）。</li></ul></li><li><strong>返回值</strong>：存在返回 <code>True</code>，否则 <code>False</code>。</li></ul><h3 id="_3-7-check-img-path-str-interval-float-0-5-max-time-float-20-0-bool" tabindex="-1"><a class="header-anchor" href="#_3-7-check-img-path-str-interval-float-0-5-max-time-float-20-0-bool"><span>3.7 check(img_path: str, interval: float = 0.5, max_time: float = 20.0) -&gt; bool</span></a></h3><ul><li><strong>功能</strong>：按间隔持续检测图像，直到出现或超时。</li><li><strong>参数</strong>： <ul><li><code>img_path</code>：待检测图像的本地路径。</li><li><code>interval</code>：检测间隔（秒，默认0.5秒）。</li><li><code>max_time</code>：最大检测时间（秒，默认20秒）。</li></ul></li><li><strong>返回值</strong>：检测到图像返回 <code>True</code>，超时返回 <code>False</code>。</li><li><strong>示例</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 最多等待10秒检测登录成功界面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">is_login </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SRAOperator.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">check</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;res/img/welcome.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">max_time</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-8-screenshot-region-calculate-region-tuple-int-int-int-int-tuple-int-int-int-int" tabindex="-1"><a class="header-anchor" href="#_3-8-screenshot-region-calculate-region-tuple-int-int-int-int-tuple-int-int-int-int"><span>3.8 _screenshot_region_calculate(region: tuple[int, int, int, int]) -&gt; tuple[int, int, int, int]</span></a></h3><ul><li><strong>功能</strong>：内部方法，计算截图区域的实际坐标和尺寸。</li><li><strong>参数</strong>： <ul><li><code>region</code>：窗口区域元组 <code>(left, top, width, height)</code>。</li></ul></li><li><strong>返回值</strong>：计算后的截图区域元组。</li></ul><h3 id="_3-9-image-resize-pillow-image-image-image-image-image" tabindex="-1"><a class="header-anchor" href="#_3-9-image-resize-pillow-image-image-image-image-image"><span>3.9 _image_resize(pillow_image: Image.Image) -&gt; Image.Image</span></a></h3><ul><li><strong>功能</strong>：调整图像尺寸到1920宽度并保持宽高比。</li><li><strong>参数</strong>： <ul><li><code>pillow_image</code>：待调整的Pillow图像对象。</li></ul></li><li><strong>返回值</strong>：调整后的图像对象。</li></ul><h3 id="_3-10-location-calculator-x-int-y-int-tuple-int-int" tabindex="-1"><a class="header-anchor" href="#_3-10-location-calculator-x-int-y-int-tuple-int-int"><span>3.10 _location_calculator(x: int, y: int) -&gt; tuple[int, int]</span></a></h3><ul><li><strong>功能</strong>：根据缩放比例和偏移量计算实际屏幕坐标。</li><li><strong>参数</strong>： <ul><li><code>x</code>、<code>y</code>：截图上的坐标。</li></ul></li><li><strong>返回值</strong>：实际屏幕坐标元组。</li></ul><h2 id="四、电源操作" tabindex="-1"><a class="header-anchor" href="#四、电源操作"><span>四、电源操作</span></a></h2><p>电源操作用于控制计算机的关机、休眠等行为，实现位于 <code>SRACore.util.WindowsPower</code> 模块。</p><h3 id="_4-1-schedule-shutdown-delay-in-seconds-int" tabindex="-1"><a class="header-anchor" href="#_4-1-schedule-shutdown-delay-in-seconds-int"><span>4.1 schedule_shutdown(delay_in_seconds: int)</span></a></h3><ul><li><strong>功能</strong>：设置Windows延时关机。</li><li><strong>参数</strong>： <ul><li><code>delay_in_seconds</code>：延时秒数（需大于0）。</li></ul></li><li><strong>异常</strong>：<code>subprocess.CalledProcessError</code>（命令执行失败）。</li><li><strong>示例</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 30分钟后关机（1800秒）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">WindowsPower.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">schedule_shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1800</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-2-shutdown-cancel" tabindex="-1"><a class="header-anchor" href="#_4-2-shutdown-cancel"><span>4.2 shutdown_cancel()</span></a></h3><ul><li><strong>功能</strong>：取消已设置的关机任务。</li><li><strong>返回值</strong>：无。</li></ul><h3 id="_4-3-hibernate" tabindex="-1"><a class="header-anchor" href="#_4-3-hibernate"><span>4.3 hibernate()</span></a></h3><ul><li><strong>功能</strong>：使计算机进入休眠状态（需系统支持）。</li><li><strong>返回值</strong>：无。</li></ul><h2 id="五、进程操作" tabindex="-1"><a class="header-anchor" href="#五、进程操作"><span>五、进程操作</span></a></h2><p>进程操作用于管理游戏及相关进程，实现位于 <code>SRACore.util.WindowsProcess</code> 模块。</p><h3 id="_5-1-find-window-title-str-int-none" tabindex="-1"><a class="header-anchor" href="#_5-1-find-window-title-str-int-none"><span>5.1 find_window(title: str) -&gt; int | None</span></a></h3><ul><li><strong>功能</strong>：基于窗口标题查找窗口句柄。</li><li><strong>参数</strong>： <ul><li><code>title</code>：窗口标题（如 &quot;崩坏：星穹铁道&quot;）。</li></ul></li><li><strong>返回值</strong>：窗口句柄（整数），未找到返回 <code>None</code>。</li></ul><h3 id="_5-2-check-window-title-str-bool" tabindex="-1"><a class="header-anchor" href="#_5-2-check-window-title-str-bool"><span>5.2 check_window(title: str) -&gt; bool</span></a></h3><ul><li><strong>功能</strong>：检查窗口是否存在并激活。</li><li><strong>参数</strong>：同 <code>find_window()</code>。</li><li><strong>返回值</strong>：窗口存在且激活返回 <code>True</code>，否则 <code>False</code>。</li></ul><h3 id="_5-3-is-process-running-process-name-str-bool" tabindex="-1"><a class="header-anchor" href="#_5-3-is-process-running-process-name-str-bool"><span>5.3 is_process_running(process_name: str) -&gt; bool</span></a></h3><ul><li><strong>功能</strong>：检查指定进程是否运行。</li><li><strong>参数</strong>： <ul><li><code>process_name</code>：进程名（如 &quot;StarRail.exe&quot;）。</li></ul></li><li><strong>返回值</strong>：运行中返回 <code>True</code>，否则 <code>False</code>。</li></ul><h3 id="_5-4-task-kill-process-name-str" tabindex="-1"><a class="header-anchor" href="#_5-4-task-kill-process-name-str"><span>5.4 task_kill(process_name: str)</span></a></h3><ul><li><strong>功能</strong>：强制关闭指定进程。</li><li><strong>参数</strong>： <ul><li><code>process_name</code>：进程名（如 &quot;HYP.exe&quot;）。</li></ul></li><li><strong>异常</strong>：<code>subprocess.CalledProcessError</code>（命令执行失败）。</li></ul><h3 id="_5-5-popen-path-str-shell-bool-false-bool" tabindex="-1"><a class="header-anchor" href="#_5-5-popen-path-str-shell-bool-false-bool"><span>5.5 Popen(path: str, shell: bool = False) -&gt; bool</span></a></h3><ul><li><strong>功能</strong>：非阻塞方式启动程序。</li><li><strong>参数</strong>： <ul><li><code>path</code>：程序路径（如 &quot;D:/StarRail/StarRail.exe&quot;）。</li><li><code>shell</code>：是否通过Shell执行（默认 <code>False</code>）。</li></ul></li><li><strong>返回值</strong>：启动成功返回 <code>True</code>，否则 <code>False</code>。</li></ul><h2 id="六、配置操作" tabindex="-1"><a class="header-anchor" href="#六、配置操作"><span>六、配置操作</span></a></h2><p>配置操作用于管理工具的自定义配置（如任务开关、路径设置），实现位于 <code>SRACore.util.Configure</code> 模块。</p><h3 id="_6-1-init" tabindex="-1"><a class="header-anchor" href="#_6-1-init"><span>6.1 init()</span></a></h3><ul><li><strong>功能</strong>：初始化配置系统（创建默认配置文件）。</li><li><strong>说明</strong>：首次运行时调用，生成 <code>data/globals.json</code> 全局配置。</li></ul><h3 id="_6-2-load-path-str-dict" tabindex="-1"><a class="header-anchor" href="#_6-2-load-path-str-dict"><span>6.2 load(path: str) -&gt; dict</span></a></h3><ul><li><strong>功能</strong>：从JSON文件加载配置。</li><li><strong>参数</strong>： <ul><li><code>path</code>：配置文件路径（如 &quot;data/globals.json&quot;）。</li></ul></li><li><strong>返回值</strong>：配置字典。</li></ul><h3 id="_6-3-save-config-dict-path-str" tabindex="-1"><a class="header-anchor" href="#_6-3-save-config-dict-path-str"><span>6.3 save(config: dict, path: str)</span></a></h3><ul><li><strong>功能</strong>：将配置字典保存到JSON文件。</li><li><strong>参数</strong>： <ul><li><code>config</code>：配置字典。</li><li><code>path</code>：目标文件路径。</li></ul></li></ul><h2 id="七、日志操作" tabindex="-1"><a class="header-anchor" href="#七、日志操作"><span>七、日志操作</span></a></h2><p>日志操作用于记录工具运行状态，便于调试与问题排查，核心对象为 <code>SRACore.util.Logger.logger</code>（基于Python <code>logging</code> 模块封装）。</p><h3 id="_7-1-info-text-str" tabindex="-1"><a class="header-anchor" href="#_7-1-info-text-str"><span>7.1 info(text: str)</span></a></h3><ul><li><strong>功能</strong>：记录普通信息（如任务启动、成功提示）。</li><li><strong>示例</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">logger.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;登录成功，开始执行日常任务&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_7-2-warning-text-str" tabindex="-1"><a class="header-anchor" href="#_7-2-warning-text-str"><span>7.2 warning(text: str)</span></a></h3><ul><li><strong>功能</strong>：记录警告信息（如配置缺失、操作超时）。</li></ul><h3 id="_7-3-error-text-str" tabindex="-1"><a class="header-anchor" href="#_7-3-error-text-str"><span>7.3 error(text: str)</span></a></h3><ul><li><strong>功能</strong>：记录错误信息（如关键任务失败、异常捕获）。</li></ul><h3 id="_7-4-debug-text-str" tabindex="-1"><a class="header-anchor" href="#_7-4-debug-text-str"><span>7.4 debug(text: str)</span></a></h3><ul><li><strong>功能</strong>：记录调试信息（仅在开发模式下输出）。</li></ul><h2 id="八、对话框" tabindex="-1"><a class="header-anchor" href="#八、对话框"><span>八、对话框</span></a></h2><p>对话框用于与用户交互（如输入、提示），实现位于 <code>SRACore.util.Dialog</code> 模块，基于PySide6的 <code>QDialog</code> 封装。</p><h3 id="_8-1-messagebox-parent-qwidget-title-str-message-str" tabindex="-1"><a class="header-anchor" href="#_8-1-messagebox-parent-qwidget-title-str-message-str"><span>8.1 MessageBox(parent: QWidget, title: str, message: str)</span></a></h3><ul><li><strong>功能</strong>：显示消息提示框（含确定按钮）。</li><li><strong>参数</strong>： <ul><li><code>parent</code>：父窗口对象。</li><li><code>title</code>：对话框标题。</li><li><code>message</code>：提示内容。</li></ul></li></ul><h3 id="_8-2-inputdialog-parent-qwidget-title-str-label-str-str-none" tabindex="-1"><a class="header-anchor" href="#_8-2-inputdialog-parent-qwidget-title-str-label-str-str-none"><span>8.2 InputDialog(parent: QWidget, title: str, label: str) -&gt; str | None</span></a></h3><ul><li><strong>功能</strong>：显示输入框（获取用户输入）。</li><li><strong>返回值</strong>：用户输入的文本（取消返回 <code>None</code>）。</li></ul><h3 id="_8-3-announcementboard-parent-qwidget-announcements-list-announcement" tabindex="-1"><a class="header-anchor" href="#_8-3-announcementboard-parent-qwidget-announcements-list-announcement"><span>8.3 AnnouncementBoard(parent: QWidget, announcements: list[Announcement])</span></a></h3><ul><li><strong>功能</strong>：显示公告栏（支持多条公告）。</li><li><strong>参数</strong>： <ul><li><code>announcements</code>：公告列表（每个公告包含标题、内容、时间）。</li></ul></li></ul>`,96)]))}const h=t(n,[["render",a]]),c=JSON.parse('{"path":"/develop/API.html","title":"API","lang":"zh-CN","frontmatter":{"title":"API","order":4,"icon":"box","description":"API SRA（StarRailAssistant）是基于图像识别的自动化工具，其核心功能通过API接口实现。本文档详细介绍各模块API的功能、参数及返回值。 一、鼠标事件 鼠标事件用于模拟真实鼠标操作，支持图像定位点击、坐标点击、光标移动及滚轮控制，核心实现位于 SRACore.util.SRAOperator.SRAOperator 类。 1.1 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-22T08:44:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EveGlowLuna\\",\\"url\\":\\"https://github.com/EveGlowLuna\\"}]}"],["meta",{"property":"og:url","content":"https://starrailassistant.top/develop/API.html"}],["meta",{"property":"og:site_name","content":"StarRailAssistant"}],["meta",{"property":"og:title","content":"API"}],["meta",{"property":"og:description","content":"API SRA（StarRailAssistant）是基于图像识别的自动化工具，其核心功能通过API接口实现。本文档详细介绍各模块API的功能、参数及返回值。 一、鼠标事件 鼠标事件用于模拟真实鼠标操作，支持图像定位点击、坐标点击、光标移动及滚轮控制，核心实现位于 SRACore.util.SRAOperator.SRAOperator 类。 1.1 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T08:44:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-22T08:44:07.000Z"}]]},"git":{"createdTime":1750390626000,"updatedTime":1750581847000,"contributors":[{"name":"EveGlowLuna","username":"EveGlowLuna","email":"yy15502497613@outlook.com","commits":2,"url":"https://github.com/EveGlowLuna"}]},"readingTime":{"minutes":8.47,"words":2542},"filePathRelative":"develop/API.md","autoDesc":true}');export{h as comp,c as data};
